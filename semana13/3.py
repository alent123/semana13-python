class MinHeap:  # Define una clase llamada MinHeap (Mont√≠culo m√≠nimo)
    def __init__(self):  # M√©todo constructor, se llama al crear una instancia
        self.heap = []  # Inicializa el mont√≠culo como una lista vac√≠a

    def delete_min(self):  # Elimina y retorna el valor m√≠nimo del mont√≠culo
        if self.is_empty():  # Si el mont√≠culo est√° vac√≠o
            return None  # Retorna None (no hay nada que eliminar)
        if len(self.heap) == 1:  # Si solo hay un elemento en el mont√≠culo
            return self.heap.pop()  # Elimina y retorna ese √∫nico elemento
        min_val = self.heap[0]  # Guarda el valor m√≠nimo (ra√≠z del mont√≠culo)
        self.heap[0] = self.heap.pop()  # Mueve el √∫ltimo elemento a la ra√≠z y elimina el √∫ltimo
        self._heapify_down(0)  # Restaura la propiedad de mont√≠culo desde la ra√≠z hacia abajo
        return min_val  # Retorna el valor m√≠nimo eliminado

    def _heapify_down(self, index):  # Restaura la propiedad de mont√≠culo hacia abajo desde un √≠ndice dado
        length = len(self.heap)  # Obtiene el tama√±o del mont√≠culo
        while True:  # Bucle infinito hasta que se rompa manualmente
            left = 2 * index + 1  # Calcula el √≠ndice del hijo izquierdo
            right = 2 * index + 2  # Calcula el √≠ndice del hijo derecho
            smallest = index  # Supone que el m√°s peque√±o es el nodo actual

            if left < length and self.heap[left] < self.heap[smallest]:  # Si el hijo izquierdo existe y es menor
                smallest = left  # Actualiza el m√°s peque√±o al hijo izquierdo
            if right < length and self.heap[right] < self.heap[smallest]:  # Si el hijo derecho existe y es menor
                smallest = right  # Actualiza el m√°s peque√±o al hijo derecho
            if smallest == index:  # Si el nodo actual ya es el m√°s peque√±o
                break  # Sale del bucle
            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]  # Intercambia el nodo actual con el m√°s peque√±o
            index = smallest  # Actualiza el √≠ndice para continuar bajando

    def is_empty(self):  # Verifica si el mont√≠culo est√° vac√≠o
        return len(self.heap) == 0  # Retorna True si la lista est√° vac√≠a, False en caso contrario

# üß™ Casos de prueba
def test_min_heap_delete_min():
    h = MinHeap()  # Crea una instancia de MinHeap
    print("üßπ Test 1:", h.delete_min() is None)  # Prueba eliminar de un mont√≠culo vac√≠o
    h.heap = [1]; print("üßπ Test 2:", h.delete_min() == 1 and h.heap == [])  # Prueba eliminar cuando hay un solo elemento
    h.heap = [1, 3, 2]; print("üßπ Test 3:", h.delete_min() == 1 and h.heap == [2, 3])  # Prueba eliminar con tres elementos
    h.heap = [1, 3, 4, 5]; print("üßπ Test 4:", h.delete_min() == 1 and h.heap == [3, 5, 4])  # Prueba eliminar con cuatro elementos
    h.heap = [1, 2, 3, 4, 5]
    print("üßπ Test 5:", h.delete_min() == 1)  # Prueba eliminar con cinco elementos

test_min_heap_delete_min()  # Ejecuta los casos de prueba